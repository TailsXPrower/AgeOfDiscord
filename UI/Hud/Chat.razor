@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root style="opacity: 0">
	<div class="window left-bottom vertical-layout" style="height: 30vh; width: 24vw; font-family: Poppins; font-weight: bold; margin: 10px">
		<div class="horizontal-layout" style="margin: 5px;">
			<div class="box center-child" style="width: 100%; height: 45px; font-size: 20px;">
				Chat
			</div>
			<button class="center-child" style="width: 45px; height: 45px; flex-shrink: 0; font-size: 20px;" onclick="@Close">
				❌
			</button>
		</div>
		<div class="box" style="margin: 5px; height: 16vh;">
			<div class="vertical-layout scroll" style="margin: 5px; gap: 4px">
				@foreach ( var entry in Entries )
				{
				<div class="chat_entry horizontal-layout" style="flex-shrink: 0;">
					<div class="author">@entry.author</div>
					<div class="message">@entry.message</div>
				</div>
				}
			</div>
		</div>
		<div class="input" style="flex-shrink: 0;">
			<TextEntry @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
		</div>
	</div>
</root>

@code
{

	[Property] public string MyStringValue { get; set; } = "Hello World!";

	TextEntry InputBox;

	public record Entry( string author, string message, RealTimeSince timeSinceAdded );
	List<Entry> Entries = new();

	TimeSince TimeSinceLastMessage;

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( MyStringValue );
	
	public void Close()
	{
		if (Panel.Style.Opacity == 0)
			return;
		
		Panel.Style.Opacity = 0;
	}

	protected override void OnUpdate()
	{
		if (InputBox is null)
			return;

		Panel.AcceptsFocus = false;

		if (TimeSinceLastMessage > 10 && !InputBox.HasFocus)
			Close();
		
		if ( Input.Pressed( "chat" ) )
		{
			Open();
			InputBox.Focus();
		}

		if ( Entries.RemoveAll( x => x.timeSinceAdded > 30.0f ) > 0 )
		{
			StateHasChanged();
		}

		SetClass( "open", InputBox.HasFocus );
	}

	void ChatFinished()
	{
		var text = InputBox.Text;
		InputBox.Text = "";

		if (string.IsNullOrWhiteSpace(text))
			return;

		AddText( Sandbox.Utility.Steam.PersonaName, text );
	}

	[Broadcast]
	public void AddText( string author, string message )
	{
		message = message.Truncate( 300 );

		if (string.IsNullOrWhiteSpace(message))
			return;

		Log.Info($"{author}: {message}");

		TimeSinceLastMessage = 0;
		Open();
		
		Entries.Add(new Entry( author, message, 0.0f ));
		StateHasChanged();
	}

	public void Open()
	{
		if (Connection.All.Count == 1)
			return;
		
		Panel.Style.Opacity = 1;
	}
}
